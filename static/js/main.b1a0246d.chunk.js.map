{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/CreateArea.jsx","components/Tweet.jsx","components/App.jsx","index.js"],"names":["Header","Footer","href","className","CreateArea","props","Zoom","in","reveal","Button","onClick","clear","id","expand","onChange","event","name","value","content","type","rows","placeholder","length","estimate","Fab","action","disabled","buttonStat","title","style","fontSize","Tweet","variant","copyBtn","App","useState","text","chars","estTweets","post","setPost","chops","setChops","setRows","setButtonStat","clickedInto","setClickedInto","revealClear","setRevealClear","handleClickCopy","tweetID","clipText","document","querySelector","innerText","navigator","clipboard","writeText","backgroundColor","setTimeout","console","log","color","focus","postLength","target","Math","ceil","visibility","priorBreakPoint","i","breakPoint","currSegment","slice","trim","prevValue","j","addEndEllipsis","index","totalLength","addFrontEllipsis","map","chop","styleTweets","key","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b1a0246d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header (){\n  return (\n    <header><h1>Twitter Chopper</h1>\n    <h2>Chop your post into tweet-size pieces.</h2></header>\n  );\n\n}\n","import React from \"react\";\n\nexport default function Footer (){\n  return (\n    <footer>&copy; 2020 by Clifton Hill<br />\n    Contact info - <a href=\"https://github.com/cliftonhill\">GitHub</a> / <a href=\"https://cliftonhill.github.io\">Web Dev Portfolio</a><br /><span className=\"small\">\"Twitter\" and \"tweet\" are trademarks of Twitter, Inc.</span></footer>\n  );\n\n}\n","import React from \"react\";\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Button from '@material-ui/core/Button';\nimport Zoom from '@material-ui/core/Zoom';\n\nexport default function CreateArea (props){\n\n  return (\n    <div>\n      <div className=\"visibility\"><Zoom in={props.reveal} ><Button onClick={props.clear}>Clear All</Button></Zoom></div>\n      <form id=\"create-area\">\n      <textarea onClick={props.expand} onChange={props.event} name=\"input\" value={props.content} type=\"text\" rows={props.rows} placeholder=\"Type your 280+ character post here...\" /><br/>\n      <span className=\"char-count\">{props.length} {props.estimate}</span> <Zoom in={props.length > 280 && \"true\"}><Fab onClick={props.action} disabled={props.buttonStat} title=\"Chop!\"><CheckIcon style={{fontSize: \"2rem\"}}/></Fab></Zoom>\n      </form>\n\n    </div>\n  );\n\n}\n","import React, {useState} from \"react\";\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Button from '@material-ui/core/Button';\n\nexport default function Tweet (props){\n  function copy () {\n    props.copyBtn(props.id);\n  }\n\n  return (\n    <div className=\"tweet\" id={\"t\" + props.id}>\n      <span className=\"tweetText\">{props.content}</span>\n      <div className=\"char-count\" ><span title=\"character count\">{props.length}</span>\n      <Button variant=\"outlined\" id={\"b\" + props.id} onClick={copy} title=\"copy tweet\"><FileCopyIcon fontSize=\"inherit\" /></Button>\n      </div>\n    </div>\n  );\n\n}\n","import React, {useState} from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport CreateArea from \"./CreateArea\";\nimport Tweet from \"./Tweet\";\n\nexport default function App (){\n  const [post, setPost] = useState({\n    text: \"\",\n    chars: \"\",\n    estTweets: \"\"\n  });\n  const [chops, setChops] = useState([]);\n  const [rows, setRows] = useState(\"1\");\n  const [buttonStat, setButtonStat] = useState(true);\n  const [clickedInto, setClickedInto] = useState(false);\n  const [revealClear, setRevealClear] = useState(false);\n\n  const checkPoint = 273;\n\n  function handleChange (event) {\n    const postLength = event.target.value.length;\n    setPost({\n      text: event.target.value,\n      chars: postLength,\n      estTweets: \"| ≈\" + Math.ceil(postLength / 275) + \" tweets\"\n    });\n    if (postLength > 220) {\n      setRows(10);\n    }\n\n    if (postLength > 500) {\n      setRows(15);\n    }\n\n    if (postLength > 280) {\n      setButtonStat(false);\n    } else {\n      setButtonStat(true);\n    }\n\n    if (postLength > 5720) { // allows for about 20 tweets\n      setButtonStat(true);\n      // deliver message to user that Twitter just won't be able to appreciate their loquacious nature.\n    }\n\n  }\n\n  function styleTweets (){\n    function addEndEllipsis(index, totalLength) {\n      //at end of first OR rest up to 2nd to last\n      if (index === 0 || index + 1 < totalLength) {\n        return \"…\";\n      } else {\n        return \"\";\n      }\n    }\n\n    function addFrontEllipsis(index) {\n      // at beginning\n      if (index > 0) {\n        return \"…\";\n      } else {\n        return \"\";\n      }\n    }\n\n    //add ellipses & thread count of thread total\n    setChops(prevValue => {\n      return prevValue.map((chop, index) => {\n        return {...chop, text: addFrontEllipsis(index) + chop.text + addEndEllipsis(index, prevValue.length) + `\\n${index + 1}/${prevValue.length}`};\n     });\n    });\n\n    //correct character count\n    setChops(prevValue => {\n      return prevValue.map(chop => {\n        return {...chop, chars: chop.text.length}\n      } );\n    })\n  }\n\n  function handleClick () {\n    // capture content of post, evaluate how many characters to split it into, then setChops for each segment wit ha fore loop 280, save 5 characters for tweet of tweet + 1 return + 2 elipsis for 9 characters.\n      // if first breakpoint is a \" \", or ending punctuation followed by a space, or a return, then set all characters prior to setChops value, and reflect char count of 273\n        // else need to iterate backwards until a breakPoint is found, note the index value, cut to that kpoint\n    //reset\n    if (chops.length > 0) {\n      setChops([]);\n    }\n\n    //set button visibility for a clear all button at top.\n    document.querySelector(\".visibility\").style.visibility = \"visible\";\n    //Main Purpose of handleClick\n    let priorBreakPoint = 0;\n\n    for (let i = 0; (post.text.length - i) > checkPoint; i = priorBreakPoint) {\n      let breakPoint = i + checkPoint;\n      //continues until last chunk of chars is < 273 char, which means it won't capture the last chunk, which we'll have to capture after\n      let punctuationMarks = /[.?!:;-]]/;\n      let carReturn = /[\\n\\r]/;\n      if (post.text[breakPoint] === \" \" || (post.text[breakPoint] === punctuationMarks && post.text[breakPoint + 1] === \" \") || post.text[breakPoint] === carReturn){\n        console.log(\"1st\");\n        let currSegment = post.text.slice(i, breakPoint).trim();\n        setChops(prevValue => [...prevValue, {\n        text: currSegment\n      }]);\n\n    } else if (false) {\n      // in here place the above conditionals that would not need an ellipsis following, because we have not broken a sentence into a portion, such as a period, or return... This will set a variable that can be used to not include the ellipses when applicable.\n    } else { //loop backwards until a space is found and break the post there. Then updated breakpoint\n        console.log(\"else\");\n          for (let j = breakPoint; post.text[j] !== \" \"; j--) {\n            if (post.text[j-1] === \" \") {\n              breakPoint = j - 1;\n              let currSegment = post.text.slice(priorBreakPoint, breakPoint).trim();\n              setChops(prevValue => [...prevValue, {\n                text: currSegment\n              }]);\n            }\n          }\n        }\n        priorBreakPoint = breakPoint;\n      }\n      // should have captured all but last chunk of post, capture the last piece here, slice to end\n      let isNextChopTheLast = priorBreakPoint + checkPoint > post.text.length;\n      if (isNextChopTheLast) {\n        console.log(\"made it\");\n          let currSegment = post.text.slice(priorBreakPoint).trim();\n          setChops(prevValue => [...prevValue, {\n          text: currSegment\n        }]);\n      }\n\n      document.querySelector(\"#create-area textarea\").style.color = \"gray\";\n    setRevealClear(true);\n    styleTweets();\n    } // end handleClick()\n\nfunction expand () {\n  if (!clickedInto) {\n      setRows(5);\n      setClickedInto(true);\n  }\n}\n\nfunction handleClickClear () {\n  console.log(\"clear all\");\n  setChops([]);\n  setPost({\n    text: \"\",\n    chars: \"\",\n    estTweets: \"\"\n  });\n  setButtonStat(true);\n  setRows(5);\n  document.querySelector(\"#create-area textarea\").style.color = \"#4a93ff\";\n  document.querySelector(\"#create-area textarea\").focus();\n}\n\nfunction handleClickCopy (id) {\n    const tweetID = `#t${id} .tweetText`;\n    const clipText = document.querySelector(tweetID).innerText;\n    navigator.clipboard.writeText(clipText);\n    // copy effect\n    document.querySelector(tweetID).style.backgroundColor = \"yellow\";\n    setTimeout(() => document.querySelector(tweetID).style.backgroundColor = \"initial\", 200);\n\n}\n\n  return (<div>\n    <Header />\n    <main>\n    <CreateArea expand={expand} rows={rows} clear={handleClickClear} event={handleChange} content={post.text} length={post.chars} estimate={post.estTweets} action={handleClick} buttonStat={buttonStat} reveal={revealClear}/>\n    {chops.map((chop, index) => <Tweet key={index} id={index}  content={chop.text} length={chop.chars} copyBtn={handleClickCopy}/> )}\n    </main>\n    <Footer />\n  </div>);\n}\n","/*\nFeatures:\n-retains line-breaks and extra spaces\n-thread of thread# is automatically generated\n-copy function copies entire tweet for repaste in Twitter\n-ready for desktop use\n-Responsive website\n\nFuture improvements:\n-Breakpoint: identify if we have a natural stop (period with a space following) that can also serve as a break point and doesn't need an ellipsis\n-allow tweet chops to be individually edited, and as one tweet expands the text automatically flows to the next and so on for realtime editing of them all for maximum pop!\n-if editing post, then change back to a blue color, and pop up a refresh note to click the check button again, or maybe line through the tweets below to indicate that it needs to be redone?\n-\n\nBugs:\n\n\nBugs fixed:\n-char count is now accurate. Spaces more than 1 long are captured in chops.text, but because html doesn't reflect more than 1 space without special escape characters, the charCount is not reflecting correctly. For instance: a content length of 55 characters that includes 10 spaces in a row, should actually be 9 less characters.\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\";\n\nReactDOM.render(\n<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}